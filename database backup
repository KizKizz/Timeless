// ignore_for_file: avoid_print, avoid_renaming_method_parameters

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:data_table_2/data_table_2.dart';
import 'data_helper.dart';


List<Book> _books = bookDataHelper().books;

//final File bookDataJson = File('assets/jsondatabase/book_data.json');

// Copyright 2019 The Flutter team. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// The file was extracted from GitHub: https://github.com/flutter/gallery
// Changes and modifications by Maxim Saplin, 2021

/// Keeps track of selected rows, feed the data into DesertsDataSource
class RestorableBookSelections extends RestorableProperty<Set<int>> {
  Set<int> _bookSelections = {};

  // Returns whether or not a row is selected by index.
  bool isSelected(int index) => _bookSelections.contains(index);

  // Takes a list of [Book]s and saves the row indices of selected rows
  // into a [Set].
  void setBookSelections(List<Book> books) {
    final updatedSet = <int>{};
    for (var i = 0; i < books.length; i += 1) {
      var book = books[i];
      if (book.selected) {
        updatedSet.add(i);
      }
    }
    _bookSelections = updatedSet;
    notifyListeners();
  }

  @override
  Set<int> createDefaultValue() => _bookSelections;

  @override
  Set<int> fromPrimitives(Object? data) {
    final selectedItemIndices = data as List<dynamic>;
    _bookSelections = {
      ...selectedItemIndices.map<int>((dynamic id) => id as int),
    };
    return _bookSelections;
  }

  @override
  void initWithValue(Set<int> value) {
    _bookSelections = value;
  }

  @override
  Object toPrimitives() => _bookSelections.toList();
}

//int _idCounter = 0;

/// Domain model entity
// class Book {
//   Book(this.title, this.id, this.author, this.publisher, this.publishDate,
//       this.edition, this.cost, this.retailPrice, this.condition, this.sold);

//   String title;
//   String id;
//   String author;
//   String publisher;
//   int publishDate;
//   double edition;
//   double cost;
//   double retailPrice;
//   String condition;
//   String sold;

//   bool selected = false;

//   fromJson(Map<String, dynamic> json) {
//     title = json['title'];
//     id = json['id'];
//     author = json['author'];
//     publisher = json['publisher'];
//     publishDate = json['publishDate'];
//     edition = json['edition'];
//     cost = json['cost'];
//     retailPrice = json['retailPrice'];
//     condition = json['condition'];
//     sold = json['sold'];
//   }

//   Map<String, dynamic> toJson() {
//     final Map<String, dynamic> data = new Map<String, dynamic>();
//     data['title'] = this.title;
//     data['id'] = this.id;
//     data['author'] = this.author;
//     data['publisher'] = this.publisher;
//     data['publishDate'] = this.publishDate;
//     data['edition'] = this.edition;
//     data['cost'] = this.cost;
//     data['retailPrice'] = this.retailPrice;
//     data['condition'] = this.condition;
//     data['sold'] = this.sold;

//     return data;
//   }
// }

/// Data source implementing standard Flutter's DataTableSource abstract class
/// which is part of DataTable and PaginatedDataTable synchronous data fecthin API.
/// This class uses static collection of deserts as a data store, projects it into
/// DataRows, keeps track of selected items, provides sprting capability
class BookDatabase extends DataTableSource {
  BookDatabase.empty(this.context) {
    books = [];
  }

  BookDatabase(this.context,
      [sortedByName = true,
      this.hasRowTaps = true,
      this.hasRowHeightOverrides = false]) {
    books = _books;
    if (sortedByName) {
      sort((d) => d.title, true);
    }
  }

  final BuildContext context;
  late List<Book> books;
  late bool hasRowTaps;
  late bool hasRowHeightOverrides;

  void sort<T>(Comparable<T> Function(Book d) getField, bool ascending) {
    books.sort((a, b) {
      final aValue = getField(a);
      final bValue = getField(b);
      return ascending
          ? Comparable.compare(aValue, bValue)
          : Comparable.compare(bValue, aValue);
    });
    notifyListeners();
  }

  int _selectedCount = 0;
  void updateSelectedBooks(RestorableBookSelections selectedRows) {
    _selectedCount = 0;
    for (var i = 0; i < books.length; i += 1) {
      var book = books[i];
      if (selectedRows.isSelected(i)) {
        book.selected = true;
        _selectedCount += 1;
      } else {
        book.selected = false;
      }
    }
    notifyListeners();
  }

  @override
  DataRow getRow(int index) {
    // ignore: unused_local_variable
    final format = NumberFormat.decimalPercentPattern(
      locale: 'en',
      decimalDigits: 0,
    );
    assert(index >= 0);
    if (index >= books.length) throw 'index > _books.length';
    final book = books[index];
    return DataRow2.byIndex(
      index: index,
      selected: book.selected,
      onSelectChanged: hasRowTaps
          ? null
          : (value) {
              if (book.selected != value) {
                _selectedCount += value! ? 1 : -1;
                assert(_selectedCount >= 0);
                book.selected = value;
                notifyListeners();
              }
            },
      onTap: hasRowTaps
          ? () => [
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                  duration: const Duration(seconds: 1),
                  content: Text('Tapped on ${book.title}'),
                )),

                _books[_books.indexOf(book)].author = 'Pending',
                notifyListeners(),
                //_books.forEach((element) {
                // if (element.id == book.id) {
                //   debugPrint('Value for field "${element.author}"');
                //   element.author = 'TestChange';
                //
                // }
                //notifyListeners();
                //}),
              ]
          : null,
      onDoubleTap: hasRowTaps
          ? () => ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                duration: const Duration(seconds: 1),
                //backgroundColor: Theme.of(context).focusColor,
                content: Text('Double Tapped on ${book.title}'),
              ))
          : null,
      onSecondaryTap: hasRowTaps
          ? () => ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                duration: const Duration(seconds: 1),
                backgroundColor: Theme.of(context).errorColor,
                content: Text('Right clicked on ${book.title}'),
              ))
          : null,
      specificRowHeight: hasRowHeightOverrides && book.cost >= 25 ? 100 : null,
      cells: [
        DataCell(Text(book.title)),
        DataCell(Text(book.id)),
        DataCell(Text(book.author)),
        DataCell(Text(book.publisher)),
        DataCell(Text(book.publishDate.toString())),
        DataCell(Text(book.edition.toString())),
        DataCell(Text(book.cost.toString())),
        DataCell(Text(book.retailPrice.toString())),
        DataCell(Text(book.condition)),
        DataCell(Text(book.sold.toString())),
      ],
    );
  }

  @override
  int get rowCount => books.length;

  @override
  bool get isRowCountApproximate => false;

  @override
  int get selectedRowCount => _selectedCount;

  void selectAll(bool? checked) {
    for (final dessert in books) {
      dessert.selected = checked ?? false;
    }
    _selectedCount = (checked ?? false) ? books.length : 0;
    notifyListeners();
  }
}

/// Async datasource for AsynPaginatedDataTabke2 example. Based on AsyncDataTableSource which
/// is an extension to FLutter's DataTableSource and aimed at solving
/// saync data fetching scenarious by paginated table (such as using Web API)
class BookDatabaseAsync extends AsyncDataTableSource {
  BookDatabaseAsync() {
    print('BookDatabaseAsync created');
  }

  BookDatabaseAsync.empty() {
    _empty = true;
    print('BookDatabaseAsync.empty created');
  }

  BookDatabaseAsync.error() {
    _errorCounter = 0;
    print('BookDatabaseAsync.error created');
  }

  bool _empty = false;
  int? _errorCounter;

  RangeValues? _costFilter;

  RangeValues? get costFilter => _costFilter;
  set caloriesFilter(RangeValues? cost) {
    _costFilter = cost;
    refreshDatasource();
  }

  final BooksFakeWebService _repo = BooksFakeWebService();

  String _sortColumn = "title";
  bool _sortAscending = true;

  void sort(String columnName, bool ascending) {
    _sortColumn = columnName;
    _sortAscending = ascending;
    refreshDatasource();
  }

  Future<int> getTotalRecords() {
    return Future<int>.delayed(
        const Duration(milliseconds: 0), () => _empty ? 0 : _booksX3.length);
  }

  @override
  Future<AsyncRowsResponse> getRows(int startIndex, int count) async {
    print('getRows($startIndex, $count)');
    if (_errorCounter != null) {
      _errorCounter = _errorCounter! + 1;

      if (_errorCounter! % 2 == 1) {
        await Future.delayed(const Duration(milliseconds: 1000));
        throw 'Error #${((_errorCounter! - 1) / 2).round() + 1} has occured';
      }
    }

    var index = startIndex;
    // ignore: unused_local_variable
    final format = NumberFormat.decimalPercentPattern(
      locale: 'en',
      decimalDigits: 0,
    );
    assert(index >= 0);

    // List returned will be empty is there're fewer items than startingAt
    var x = _empty
        ? await Future.delayed(const Duration(milliseconds: 2000),
            () => BooksFakeWebServiceResponse(0, []))
        : await _repo.getData(
            startIndex, count, _costFilter, _sortColumn, _sortAscending);

    var r = AsyncRowsResponse(
        x.totalRecords,
        x.data.map((book) {
          return DataRow(
            key: ValueKey<String>(book.title),
            selected: book.selected,
            onSelectChanged: (value) {
              if (value != null) {
                setRowSelection(ValueKey<String>(book.title), value);
              }
            },
            cells: [
              DataCell(Text(book.title)),
              DataCell(Text(book.id)),
              DataCell(Text(book.author)),
              DataCell(Text(book.publisher)),
              DataCell(Text(book.publishDate.toString())),
              DataCell(Text(book.edition.toString())),
              DataCell(Text(book.cost.toString())),
              DataCell(Text(book.retailPrice.toString())),
              DataCell(Text(book.condition)),
              DataCell(Text(book.sold.toString())),
            ],
          );
        }).toList());

    return r;
  }
}

class BooksFakeWebServiceResponse {
  BooksFakeWebServiceResponse(this.totalRecords, this.data);

  /// THe total ammount of records on the server, e.g. 100
  final int totalRecords;

  /// One page, e.g. 10 reocrds
  final List<Book> data;
}

class BooksFakeWebService {
  int Function(Book, Book)? _getComparisonFunction(
      String column, bool ascending) {
    var coef = ascending ? 1 : -1;
    switch (column) {
      case 'title':
        return (Book d1, Book d2) => coef * d1.title.compareTo(d2.title);
      case 'id':
        return (Book d1, Book d2) => coef * d1.id.compareTo(d2.id);
      case 'author':
        return (Book d1, Book d2) => coef * d1.author.compareTo(d2.author);
      case 'publisher':
        return (Book d1, Book d2) =>
            coef * d1.publisher.compareTo(d2.publisher);
      case 'publishDate':
        return (Book d1, Book d2) => coef * (d1.publishDate - d2.publishDate);
      case 'edition':
        return (Book d1, Book d2) => coef * (d1.edition - d2.edition).round();
      case 'cost':
        return (Book d1, Book d2) => coef * (d1.cost - d2.cost).round();
      case 'retail Price':
        return (Book d1, Book d2) =>
            coef * (d1.retailPrice - d2.retailPrice).round();
      case 'condition':
        return (Book d1, Book d2) =>
            coef * d1.condition.compareTo(d2.condition);
    }

    return null;
  }

  Future<BooksFakeWebServiceResponse> getData(int startingAt, int count,
      RangeValues? costFilter, String sortedBy, bool sortedAsc) async {
    return Future.delayed(
        Duration(
            milliseconds: startingAt == 0
                ? 2650
                : startingAt < 20
                    ? 2000
                    : 400), () {
      var result = _booksX3;

      if (costFilter != null) {
        result = result
            .where(
                (e) => e.cost >= costFilter.start && e.cost <= costFilter.end)
            .toList();
      }

      result.sort(_getComparisonFunction(sortedBy, sortedAsc));
      return BooksFakeWebServiceResponse(
          result.length, result.skip(startingAt).take(count).toList());
    });
  }
}

List<Book> _booksX3 = _books.toList()
  ..addAll(_books.map((i) => Book(i.title + ' x2', i.id, i.author, i.publisher,
      i.publishDate, i.edition, i.cost, i.retailPrice, i.condition, i.sold)))
  ..addAll(_books.map((i) => Book(i.title + ' x3', i.id, i.author, i.publisher,
      i.publishDate, i.edition, i.cost, i.retailPrice, i.condition, i.sold)));

//JSON Helper
// Future<List<Book>> readBookData(File file) async {
//   String contents = await file.readAsString();
//   var jsonResponse = jsonDecode(contents);
//   List<Book> temp = [];

//   for (var b in jsonResponse) {
//     Book book = Book(
//         b['title'],
//         b['id'],
//         b['author'],
//         b['publisher'],
//         b['publishDate'],
//         b['edition'],
//         b['cost'],
//         b['retailPrice'],
//         b['condition'],
//         b['sold']);
//     temp.add(book);
//   }
//   debugPrint('test ${_books.length}');
//   return temp;
// }
